generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserPlan {
  FREE
  PRO
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  urls Url[]

  plan UserPlan @default(FREE)
}

model Url {
  id          String  @id @default(cuid())
  name        String  @default("")
  originalUrl String
  shortUrl    String  @unique
  slug        String? @unique //Only in pro plan

  history UrlHistory[]

  totalClicks Int @default(0)

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, shortUrl])
}

model UrlHistory {
  id String @id @default(cuid())
  ip String

  city      String?
  country   String?
  latitude  String?
  longitude String?
  regin     String?

  url   Url?    @relation(fields: [urlId], references: [id], onDelete: Cascade)
  urlId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
